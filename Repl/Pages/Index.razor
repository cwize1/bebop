@page "/"
@using Core.Generators
@using Core.Meta
@using Core.Parser
@inject IJSRuntime JS


<div class="container">
    <div class="side-by-side">
        <section>
            <textarea id="schema" autofocus autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
                @oninput="OnInput" placeholder="struct Point { int32 x; int32 y; }"></textarea>
        </section>
        <section class="code-section">
            @* ReSharper disable once UnknownCssClass *@
            <pre class="language-ts"><code id="output">Generated code will appear here.</code></pre>
        </section>
    </div>
    <div class="toolbar">
        <label for="generators">Generate code for:</label>

        <select @bind="SelectedGenerator" id="generators">
            @foreach (var (key, value) in GeneratorUtils.ImplementedGeneratorNames)
            {
                <option value="@key">@value</option>
            }
        </select>
    </div>
</div>

@code {
    string _selectedGenerator = "ts";
    string SelectedGenerator
    {
        get => _selectedGenerator;
        set
        {
            if (_selectedGenerator != value)
            {
                _selectedGenerator = value;
                ShowOutput().GetAwaiter().GetResult();
            }
        }
    }
    string _schema = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await JS.InvokeAsync<bool>("hasExampleParam"))
            {
                await JS.InvokeVoidAsync("setExampleSchema");
                _schema = GetExampleSchema();
            }
        }
    }


}

@functions {
    [JSInvokable]
    public static string GetExampleSchema()
    {
        const string exampleSchema = @"enum Instrument {
    Sax = 0;
    Trumpet = 1;
    Clarinet = 2;
}

readonly struct Musician {
    string name;
    Instrument plays;
}

message Song {
    1 -> string title;
    2 -> uint16 year;
    3 -> Musician[] performers;
}

struct Library {
    map[guid, Song] songs;
}";
        return exampleSchema;
    }

    [JSInvokable]
    public static string GetCompilerName()
    {
        return ReservedWords.CompilerName;
    }

    [JSInvokable]
    public static string GetCompilerVersion()
    {
        return ReservedWords.CompilerVersion;
    }

    [JSInvokable]
    public static async Task<CompilerOutput> CompileSchema(string textualSchema, string generatorAlias)
    {
        textualSchema = textualSchema?.Trim() ?? string.Empty;
        generatorAlias = generatorAlias?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(textualSchema))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No schema was provided"
            };
        }
        if (string.IsNullOrWhiteSpace(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No code generator was specified"
            };
        }
        if (!GeneratorUtils.ImplementedGenerators.ContainsKey(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = $"The specified generator '{generatorAlias}' is not valid."
            };
        }

        try
        {
            var parser = new SchemaParser(textualSchema, new SchemaOptions() {Namepace = "Bebop.Example"});
            var schema = await parser.Evaluate();
            schema.Validate();
            return new CompilerOutput
            {
                IsOk = true,
                Result = GeneratorUtils.ImplementedGenerators[generatorAlias](schema).Compile()
            };
        }
        catch (Exception e)
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = e.ToString()
            };
        }
    }

    private async Task ShowOutput()
    {
        var co = await CompileSchema(_schema, SelectedGenerator);
        await JS.InvokeVoidAsync("showOutput", SelectedGenerator, co.IsOk, co.Result);
    }

    [JSInvokable]
    private async Task OnInput(ChangeEventArgs e)
    {
        _schema = e.Value as string;
        await ShowOutput();
    }

}
